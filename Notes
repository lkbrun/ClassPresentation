Introduction. 
	- All system -> set of defects
	- Implementation bugs and design flaws
	- IEEE Computer society, leading organization for computing professionals
	- Launched a cybersecurity initiative aiming to expanding and escalating its ongoing involvment in the field of cybersecurity
	- First step to launch Center for secure design -> shift focus.

1. Earn or Give, but never assume, Trust
	- Systems consists mulitple component successfylly accomplish their purpose.
	- Inherently insecure hostile environment. -> desktop computer.
	- Most common security failures misplaced trust.
	- Thick clients, web browsers, automobiles, pacemakers, gaming systems, 
	- Designs place authorization, access control, security policies in client software thinking wont discovered, modified or exposed.
	- Data sent application considered malicous until proven otherwise. 
	- Safer in the long run. 
	- If IP/SD must be client mechanisms cope potential compromise. 
	- Validate all user input. 
	- Consider where code executed, where data will go, from where data comes.  

3. Authorize after you authenticate
	- Identify person, determine actions execute.
	- Authenticate sufficient deciding allow/disallow funtionality.
	- ATM User
	- Depend privelages user and context request. Time and location.
	- Authorize may invoke authentication
	- Authenticate safe environment, server, back-end.

5. Define an approach that ensures all data are explicitly validated.
	- Systems and components makes assumptions about data they operate on. It is important to explicitly ensure that such assumptions hold: Vulnerabilities frequently arise when implicit assumptions is done about data, which can be exploited by an attacker.
	- Design software  ensure comprehensive data validation takes place and assumpiotns about data validated when used.
	- Design software feasble security reviewer efficiently reason verify correctness data validation.
	- Designing for verifiability code evolves, resulting risk vulnerable later stage development cycle. 
	- Design and use centralized validation mechanisms ensure all data entering system properly validated
		- Intercept all incoming requests, and apply basic input validation to all request parameters.
		- Centrally validate all fields of all received protocol messages before any actual processing takes place.
		- When consuming complex data formats must such parsers and validators be designed to robustly cope with potentially malicious or malformed inputs.
	- Canonical form before validation. 
	- Use common libraries of validation primitives. Email addresses, dates, etc. Should be White listing.
	- Various problems arise from failure to address this security design principle
		- Injection vulnerabilities
		- XXS 
		- Attempting to validate data that is not in canonical form can allow validation to be bypassed. 
		- Non memory safe language are exposed to memory corruption vulnerabilities such as buffer overflow, etc
		- Need upperbound on data size of input -> resource exhaustion
	- 

7. Identify sensitive data and how they should be handeled.
	- First tasks developers: Identify sensitive data and how to protect it.
	- Over the years have many systems failed to protect.
	- Reason: failed to identify it as sensitive or failed to identify all the ways in which data could be manipulated.
	- Data sensitivity is context-sensitive:
		- Regulations
		- Company policies
		- constractual obligations
		- user expectations
	- Different regulation systems: EU Data Protection Directive differ from the US
	- Not all data protection requirements are the same:
		- 1: For some data: confidentiality is critical: financial records and corporate intellectual property
		- 2: For some data: availability is critical: medial records
		- 3: For some data: integrity is critical: spoofing or substituting data to cause a system to misbehave intentionally
	- Access control mechanisms and cryptography for 1 and 3
	- Backups to preserve data availability

	- Data sets do not only exists at rest, but in transit between components within a single system and between organizations.
	- Crossing trust boundaries.
	- Essential to identify trust boundaries and rectifying them with data protection policies is an essential design activity.
	- Trust is just as tricky as sensitive data.
	- Policy requirements and data sensitivity can change over time as business climate evolves, more interconnected systems
	- Regualtory revisiting and revising data protection plicies and their design implications is essential. 

9. Understand how integrating external components changes your attack surface
	- Unlikely to develope new system without external pieces of software.
	- Adding functionality, developerse often make use of existing components.
	- External components are "not written here" in the firm
		- off the shelf components, platforms, applications
		- Third party open source libraries
		- Widgets or gadgets added or loaded as part of a web project
		- Access to some functionality provided by the component that you plan to take advantage of( web service )
		- Software developed by different team within same organisation. 
	- These may be included as binaries, libraries, source code or as simple API's
	
	- Functionality should be acheived by reuse of tried and true pieces rather than creating from scratch.
	- Old components have been tested and validated and stand up to the company current secuirty standards.
	- By using rather than building: means the software inherits the security weaknesses, limitations, maintanance responsibility and threat model.
	- This must be solved, mitigated or accounted for when the system is finished.
	- Allocate time in software development methodology to consider security impact on your system when including external source
		- Changes the threat model ?
		- Add attack surface? 
		- Unused features?
		- Does the included components include other comps?
		- Source known and trusted? 
		- Documentation?
	- External components should not be trusted until appropriate secure controls have been applied.
	- At a minimum consider the following;
		- Isolate external components.	
		- Only enable functionality you intend to use
		- And if you include non used func you need to consider how that changes the attack surface.
		- If you cant configure security properties, use another library.
		- Or cannot satisfy desired security goals
		- Follow or track sources that track or publish security-related information.
		- Maintain an up to date list of all consumed exernal components
		- Authenticate data flow between system and external components.
		- Consider all data from external sources as tainted until proven valid.
		- Design for flexibility. If need of change, or component is to risky to use. Should be easy to change.  